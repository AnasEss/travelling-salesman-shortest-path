# packages
from travelling_salesman_pkg import *
import numpy as np



def main():

    ############################################
    # Problem modelling
    ############################################


    # names of cities
    city_list = np.array(['casablanca',
                          'rabat',
                          'kenitra',
                          'marrakech',
                          'tanger',
                          'fes',
                          'meknes',
                          'dakhla',
                          'agadir',
                          'oujda',
                          'houceima',
                          'laayoune',
                          'mohammadia',
                          'tetouan',
                          'asfi',
                          'taza'])
    # labels of cities
    cities = np.arange(16)
    # dictionnary of cities
    d = dict(zip(cities, city_list))
    # distances matrix
    distances = np.array([[0, 87.0, 141.0, 242.0, 338.0, 294.0, 238.0, 1614.0, 466.0, 615.0,
                           598.0, 1082.0, 27.0, 365.0, 244.0, 402.0],
                          [88.0, 0, 54.0, 324.0, 251.0, 207.0, 151.0, 1696.0, 548.0, 528.0,
                           512.0, 1165.0, 64.2, 279.0, 331.0, 316.0],
                          [141.0, 53.0, 0, 378.0, 207.0, 201.0, 145.0, 1750.0, 602.0, 522.0,
                           462.0, 1219.0, 118.0, 234.0, 385.0, 310.0],
                          [244.0, 323.0, 377.0, 0, 547.0, 530.0, 474.0, 1389.0, 258.0,
                           851.0, 829.0, 885.0, 263.0, 601.0, 157.0, 639.0],
                          [338.0, 250.0, 206.0, 575.0, 0, 399.0, 343.0, 1970.0, 798.0,
                           719.0, 290.0, 1416.0, 315.0, 63.0, 581.0, 507.0],
                          [295.0, 207.0, 201.0, 532.0, 399.0, 0, 64.0, 1899.0, 756.0, 331.0,
                           356.0, 1373.0, 272.0, 272.0, 538.0, 119.0],
                          [240.0, 152.0, 145.0, 477.0, 343.0, 65.0, 0, 1848.0, 700.0, 385.0,
                           318.0, 1317.0, 216.0, 254.0, 483.0, 173.0],
                          [1615.0, 1695.0, 1749.0, 1406.0, 1946.0, 1902.0, 1846.0, 0,
                           1167.0, 1062.0, 1012.0, 540.0, 1632.0, 1966.0, 835.0, 2019.0],
                          [468.0, 547.0, 601.0, 258.0, 798.0, 754.0, 698.0, 1173.0, 0,
                           1075.0, 1059.0, 641.0, 487.0, 825.0, 315.0, 863.0],
                          [616.0, 528.0, 521.0, 853.0, 718.0, 331.0, 385.0, 2227.0, 1075.0,
                           0, 259.0, 1692.0, 591.0, 478.0, 857.0, 220.0],
                          [647.0, 559.0, 461.0, 884.0, 291.0, 251.0, 416.0, 2260.0, 1054.0,
                           259.0, 0, 1724.0, 623.0, 234.0, 890.0, 252.0],
                          [1084.0, 1164.0, 1218.0, 874.0, 1415.0, 1371.0, 1315.0, 536.0,
                           638.0, 1691.0, 1669.0, 0, 1107.0, 1443.0, 931.0, 1482.0],
                          [29.0, 64.0, 117.0, 266.0, 315.0, 271.0, 215.0, 1642.0, 490.0,
                           591.0, 569.0, 1107.0, 0, 342.0, 272.0, 379.0],
                          [366.0, 278.0, 234.0, 603.0, 64.0, 257.0, 255.0, 1979.0, 827.0,
                           477.0, 233.0, 1443.0, 343.0, 0, 603.0, 365.0],
                          [245.0, 325.0, 379.0, 157.0, 576.0, 532.0, 476.0, 1466.0, 304.0,
                           852.0, 830.0, 931.0, 265.0, 603.0, 0, 647.0],
                          [404.0, 316.0, 310.0, 641.0, 508.0, 119.0, 173.0, 2017.0, 865.0,
                           221.0, 202.0, 1482.0, 381.0, 365.0, 647.0, 0]], dtype=object)

    ############################################
    # Implementation of the algorithm
    ############################################

    # parameters of the algorithm
    n_iter, T0 = 3000, 10

    # distance of the problem
    def distance(x, y):
        return distances[x, y]

    

    # Travelling salesman implementaion
    simulation = TravelingSalesman(cities, distance)
    simulation.print_result(n_iter, T0, d)


if __name__ == "__main__":
    main()
